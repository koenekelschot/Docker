# make sure that your homeassistant container is not using a base url

server {
    listen 80;
	listen [::]:80;
	server_name ${HA_DOMAIN};

    set $fail2ban_result "f2b_ok";

    access_log /var/log/nginx/homeassistant-access.log fail2ban;
    error_log /var/log/nginx/homeassistant-error.log;

    # Rule for legitimate ACME Challenge requests (like /.well-known/acme-challenge/xxxxxxxxx)
    # We use ^~ here, so that we don't check other regexes (for speed-up). We actually MUST cancel
    # other regex checks when our other config files contain regex rules that deny access to files with dotted names.
    location ^~ /.well-known/acme-challenge/ {
        access_log /var/log/nginx/homeassistant-acme-challenge.log;

        # Set correct content type. According to this:
        # https://community.letsencrypt.org/t/using-the-webroot-domain-verification-method/1445/29
        # Current specification requires "text/plain" or no content header at all.
        # It seems that "text/plain" is a safe option.
        default_type "text/plain";

        # This directory must be the same as the certbot "webroot-path" parameter.
        root /var/www/certbot;
    }

    # Hide /acme-challenge subdirectory and return 404 on all requests.
    # It is somewhat more secure than letting Nginx return 403.
    # Ending slash is important!
    location = /.well-known/acme-challenge/ {
        return 404;
    }

    location / {
        if ($allow_list_onlyme = no) {
            set $fail2ban_result "f2b_notme";
        }

        return 444;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;

    server_name ${HA_DOMAIN};

    access_log /var/log/nginx/homeassistant-ssl-access.log fail2ban;
    error_log /var/log/nginx/homeassistant-ssl-error.log;

    include /etc/nginx/servers/ssl.conf;
    # Certificates
    ssl_certificate /etc/letsencrypt/live/${HA_DOMAIN}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${HA_DOMAIN}/privkey.pem;
    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate /etc/letsencrypt/live/${HA_DOMAIN}/fullchain.pem;

    set $fail2ban_result "f2b_ok";

    # Allow lan access if default is set to no
    if ($allow_list_homeassistant = yes) { 
        set $allowed_country yes; 
    } 
    # Country geo block
    if ($allowed_country = no) {
        set $fail2ban_result "f2b_geoblock";
        return 444;
    }

    # Check responses for "invalid_auth" (fail2ban)
    lua_need_request_body on;
    body_filter_by_lua '
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. ngx.arg[1]
        if (ngx.arg[2] and ngx.ctx.buffered:find("invalid_auth", 1, true)) then
            ngx.var.fail2ban_result = "f2b_authfail"
        end
    ';

    location / {
        include             /etc/nginx/servers/proxy.conf;
        proxy_set_header    Accept-Encoding ""; # required for Lua body filter
        proxy_set_header    Connection "Upgrade";
        proxy_pass          http://${SERVER_IPv4}:8123;
    }
}
