---
.ssh_before_script: &ssh_before_script
  - apk update && apk add openssh-client rsync
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  - mkdir -p ~/.ssh && chmod 700 ~/.ssh
  - echo "$SSH_HOST_KEY" > ~/.ssh/known_hosts
  - chmod 644 ~/.ssh/known_hosts

stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: python:3.11-alpine
  before_script:
    - *ssh_before_script
    - pip3 install Jinja2 pylint
  artifacts:
    paths:
      - cron
      - projects
      - .yamllint
      - deploy.sh
      - docker-compose.yml
      - post-deploy.sh
  script: 
    - pylint ./build.py
    - python ./build.py

lint yaml:
  stage: test
  image: sdesbure/yamllint
  dependencies: 
    - build
  variables:
    GIT_STRATEGY: none
  before_script:
    - yamllint --version
  script:
    - yamllint ./docker-compose.yml
    - yamllint ./projects

shell check:
  stage: test
  image: koalaman/shellcheck-alpine:stable
  dependencies: 
    - build
  variables:
    GIT_STRATEGY: none
  before_script:
    - shellcheck --version
  script:
    - shellcheck ./deploy.sh
    - shellcheck ./post-deploy.sh
    - shellcheck ./cron/*
    - for file in $(find ./projects -type f -name '*.sh'); do shellcheck $file; done;

validate docker-compose:
  stage: test
  image: docker/compose:1.29.2
  dependencies: 
    - build
  variables:
    GIT_STRATEGY: none
  script: docker-compose config

deploy:
  stage: deploy
  dependencies: 
    - build
  variables:
    GIT_STRATEGY: none
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - *ssh_before_script
  script: 
    - rsync -athv --delete --stats ./cron/ $SSH_USER@$SSH_HOST:$SSH_FOLDER_DOCKER/cron/
    - rsync -athv --delete --stats ./projects/ $SSH_USER@$SSH_HOST:$SSH_FOLDER_DOCKER/projects/
    - rsync -athv deploy.sh $SSH_USER@$SSH_HOST:$SSH_FOLDER_DOCKER/deploy.sh
    - rsync -athv docker-compose.yml $SSH_USER@$SSH_HOST:$SSH_FOLDER_DOCKER/docker-compose.yml
    - rsync -athv post-deploy.sh $SSH_USER@$SSH_HOST:$SSH_FOLDER_DOCKER/post-deploy.sh
    - ssh $SSH_USER@$SSH_HOST "cd $SSH_FOLDER_DOCKER; sudo -S sh ./deploy.sh"
    - ssh $SSH_USER@$SSH_HOST "cd $SSH_FOLDER_DOCKER; sudo -S sh ./post-deploy.sh"
